generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  name       String?
  email      String     @unique
  password   String
  dni        String?
  phone      String?
  verified   Boolean    @default(false)
  bank       Bank?      @relation(fields: [bankName], references: [name])
  codePhone  Phone?     @relation(fields: [phoneCode], references: [code])
  bankName   String?
  phoneCode  String?
  balance    Float      @default(0.0)
  rafflesWon Raffle[]   @relation("UserRafflesWon")
  tickets    Ticket[]   @relation("UserTickets")
  role       UserRole   @default(USER)
}

model Bank {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  code   String
  users  User[]
}

model Phone {
  id     Int     @id @default(autoincrement())
  code   String  @unique
  users  User[]
}

model Animal {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  combinations Combination[] @relation("AnimalCombinations")
}

model Color {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  combinations Combination[] @relation("ColorCombinations")
}

model Combination {
  id                Int                 @id @default(autoincrement())
  animalId          Int
  animal            Animal              @relation("AnimalCombinations", fields: [animalId], references: [id])
  colorId           Int
  color             Color               @relation("ColorCombinations", fields: [colorId], references: [id])
  raffles           Raffle[]
  tickets           CombinationOnTicket[]

  animalName        String              @map("animal_name")
  colorName         String              @map("color_name")
}

model Raffle {
  id                 Int                 @id @default(autoincrement())
  date               DateTime
  time               DateTime
  winningCombinationId Int?
  winningCombination Combination?       @relation(fields: [winningCombinationId], references: [id])
  status             RaffleStatus
  tickets            Ticket[]           @relation("RaffleTickets")
  winners            User[]             @relation("UserRafflesWon")
}

model Ticket {
  id          Int                 @id @default(autoincrement())
  userId      Int
  user        User                @relation("UserTickets", fields: [userId], references: [id])
  raffleId    Int
  raffle      Raffle              @relation("RaffleTickets", fields: [raffleId], references: [id])
  combinations CombinationOnTicket[]
}

model CombinationOnTicket {
  ticketId      Int
  ticket        Ticket              @relation(fields: [ticketId], references: [id])
  combinationId Int
  combination   Combination         @relation(fields: [combinationId], references: [id])

  @@id([ticketId, combinationId])
}

enum RaffleStatus {
  PENDING
  FINALIZED
}

enum UserRole {
  USER
  ADMIN
}
